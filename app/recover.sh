#!/bin/bash

# Create package.json for Electron, React, Webpack, and Tailwind
cat > package.json << EOL
{
  "name": "satellite-booking-app",
  "version": "1.0.0",
  "main": "main.js",
  "scripts": {
    "start": "electron .",
    "dev": "webpack serve --config webpack.config.js --open & electron .",
    "build": "webpack"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwindcss": "^3.4.1",
    "electron": "^31.0.0"
  },
  "devDependencies": {
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1",
    "html-webpack-plugin": "^5.5.3",
    "css-loader": "^6.8.1",
    "style-loader": "^3.3.3",
    "postcss-loader": "^7.3.3",
    "autoprefixer": "^10.4.14",
    "babel-loader": "^9.1.3",
    "@babel/preset-react": "^7.22.5",
    "@babel/preset-env": "^7.22.9"
  }
}
EOL

# Create package-lock.json (placeholder, will be regenerated by npm install)
touch package-lock.json
echo "{}" > package-lock.json

# Create main.js (Electron entry point)
cat > main.js << EOL
const { app, BrowserWindow } = require('electron');
const path = require('path');

function createWindow() {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      enableRemoteModule: false,
      nodeIntegration: false
    }
  });

  win.loadURL('http://localhost:3000'); // Webpack dev server
  // For production: win.loadFile(path.join(__dirname, 'dist/index.html'));
}

app.whenReady().then(() => {
  createWindow();
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});
EOL

# Create preload.js (minimal Electron preload script for secure context)
cat > preload.js << EOL
const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  send: (channel, data) => {
    const validChannels = ['toMain'];
    if (validChannels.includes(channel)) {
      ipcRenderer.send(channel, data);
    }
  },
  receive: (channel, func) => {
    const validChannels = ['fromMain'];
    if (validChannels.includes(channel)) {
      ipcRenderer.on(channel, (event, ...args) => func(...args));
    }
  }
});
EOL

# Create public/index.html
mkdir -p public
cat > public/index.html << EOL
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Satellite Booking App</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>
EOL

# Create src/App.jsx
mkdir -p src
cat > src/App.jsx << EOL
import React from 'react';
import './index.css';

function App() {
  return (
    <div className="text-center p-4">
      <h1 className="text-2xl font-bold">Satellite Booking App</h1>
      <p>Welcome to the app!</p>
    </div>
  );
}

export default App;
EOL

# Create src/assets/logo1.png (placeholder, requires manual replacement)
mkdir -p src/assets
touch src/assets/logo1.png
echo "Placeholder for logo1.png - replace with actual image" > src/assets/logo1.png

# Create src/index.css
cat > src/index.css << EOL
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: Arial, sans-serif;
}
EOL

# Create src/index.js
cat > src/index.js << EOL
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
EOL

# Create src/pages/*.html (placeholders for potential static routes or templates)
mkdir -p src/pages
for page in booking-detail bookings home login new-booking profile-completion satellites; do
  cat > src/pages/$page.html << EOL
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${page^}</title>
  <link href="../index.css" rel="stylesheet">
</head>
<body>
  <div id="root">Loading ${page^}...</div>
</body>
</html>
EOL
done

# Create tailwind.config.js
cat > tailwind.config.js << EOL
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx,html}'],
  theme: {
    extend: {},
  },
  plugins: [],
}
EOL

# Create webpack.config.js
cat > webpack.config.js << EOL
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react']
          }
        }
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader', 'postcss-loader'],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './public/index.html',
    }),
  ],
  devServer: {
    static: path.join(__dirname, 'public'),
    compress: true,
    port: 3000,
  },
  target: 'electron-renderer',
};
EOL

# Create .babelrc for React
cat > .babelrc << EOL
{
  "presets": ["@babel/preset-env", "@babel/preset-react"]
}
EOL

echo "Files created. Run 'npm install' to install dependencies, then 'npm run dev' to start the Electron app."
